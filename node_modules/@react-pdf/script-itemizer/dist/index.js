'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _unicodeProperties = require('@react-pdf/unicode-properties');

var _unicodeProperties2 = _interopRequireDefault(_unicodeProperties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ignoredScripts = ['Common', 'Inherited', 'Unknown'];

/**
 * A ScriptItemizer is used by a GlyphGenerator to resolve
 * Unicode script runs in an AttributedString.
 */

exports.default = function () {
  return function (_ref) {
    var Run = _ref.Run;
    return function () {
      function ScriptItemizer() {
        _classCallCheck(this, ScriptItemizer);
      }

      _createClass(ScriptItemizer, [{
        key: 'getRuns',
        value: function getRuns(string) {
          var lastIndex = 0;
          var lastScript = 'Unknown';
          var index = 0;
          var runs = [];

          if (!string) {
            return [];
          }

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = string[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var char = _step.value;

              var codePoint = char.codePointAt();
              var script = _unicodeProperties2.default.getScript(codePoint);

              if (script !== lastScript && !ignoredScripts.includes(script)) {
                if (lastScript !== 'Unknown') {
                  runs.push(new Run(lastIndex, index - 1, { script: lastScript }));
                }

                lastIndex = index;
                lastScript = script;
              }

              index += char.length;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          if (lastIndex < string.length) {
            runs.push(new Run(lastIndex, string.length, { script: lastScript }));
          }

          return runs;
        }
      }]);

      return ScriptItemizer;
    }();
  };
};