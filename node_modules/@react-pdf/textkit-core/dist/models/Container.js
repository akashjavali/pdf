'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Path = require('../geom/Path');

var _Path2 = _interopRequireDefault(_Path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Container = function () {
  function Container(path) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Container);

    this.path = path;
    this.exclusionPaths = options.exclusionPaths || [];
    this.tabStops = options.tabStops || [];
    this.tabStopInterval = options.tabStopInterval || 80;
    this.columns = options.columns || 1;
    this.columnGap = options.columnGap || 18; // 1/4 inch
    this.blocks = [];
  }

  _createClass(Container, [{
    key: 'bbox',
    get: function get() {
      return this.path.bbox;
    }
  }, {
    key: 'polygon',
    get: function get() {
      return this.path.toPolygon();
    }
  }, {
    key: 'exclusionPolygon',
    get: function get() {
      if (!this.exclusionPaths.length) {
        return null;
      }

      var excluded = new _Path2.default();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.exclusionPaths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var p = _step.value;

          excluded.append(p);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return excluded.toPolygon();
    }
  }]);

  return Container;
}();

exports.default = Container;