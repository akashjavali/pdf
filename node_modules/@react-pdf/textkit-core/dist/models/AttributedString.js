'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Run = require('./Run');

var _Run2 = _interopRequireDefault(_Run);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AttributedString = function () {
  function AttributedString() {
    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var runs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, AttributedString);

    this.string = string;
    this.runs = runs;
    this.length = string.length;
  }

  _createClass(AttributedString, [{
    key: 'runIndexAt',
    value: function runIndexAt(index) {
      for (var i = 0; i < this.runs.length; i++) {
        if (this.runs[i].start <= index && index < this.runs[i].end) {
          return i;
        }
      }

      return this.runs.length - 1;
    }
  }, {
    key: 'trim',
    value: function trim() {
      var i = void 0;
      for (i = this.string.length - 1; i >= 0; i--) {
        if (this.string[i] !== ' ') {
          break;
        }
      }

      return this.slice(0, i + 1);
    }
  }, {
    key: 'slice',
    value: function slice(start, end) {
      if (this.string.length === 0) return this;

      var startRunIndex = this.runIndexAt(start);
      var endRunIndex = Math.max(this.runIndexAt(Math.max(end - 1, 0)), startRunIndex);
      var startRun = this.runs[startRunIndex];
      var endRun = this.runs[endRunIndex];
      var runs = [];

      runs.push(startRun.slice(start - startRun.start, end - startRun.start));

      if (startRunIndex !== endRunIndex) {
        runs.push.apply(runs, _toConsumableArray(this.runs.slice(startRunIndex + 1, endRunIndex).map(function (r) {
          return r.copy();
        })));

        if (endRun.start !== 0) {
          runs.push(endRun.slice(0, end - endRun.start));
        }
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = runs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var run = _step.value;

          run.start -= start;
          run.end -= start;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return new AttributedString(this.string.slice(start, end), runs);
    }
  }], [{
    key: 'fromFragments',
    value: function fromFragments() {
      var fragments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var string = '';
      var offset = 0;
      var runs = [];

      fragments.forEach(function (fragment) {
        string += fragment.string;
        runs.push(new _Run2.default(offset, offset + fragment.string.length, fragment.attributes));
        offset += fragment.string.length;
      });

      return new AttributedString(string, runs);
    }
  }]);

  return AttributedString;
}();

exports.default = AttributedString;