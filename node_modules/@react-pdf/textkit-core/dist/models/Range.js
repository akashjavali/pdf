"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * This class represents a numeric range between
 * a starting and ending value, inclusive.
 */
var Range = function () {
  /**
   * Creates a new Range
   * @param {number} start the starting index of the range
   * @param {number} end the ending index of the range, inclusive
   */
  function Range(start, end) {
    _classCallCheck(this, Range);

    /**
     * The starting index of the range
     * @type {number}
     */
    this.start = start;

    /**
     * The ending index of the range, inclusive
     * @type {number}
     */
    this.end = end;
  }

  /**
   * The length of the range
   * @type {number}
   */


  _createClass(Range, [{
    key: "equals",


    /**
     * Returns whether this range is equal to the given range
     * @param {Range} other the range to compare
     * @return {boolean}
     */
    value: function equals(other) {
      return other.start === this.start && other.end === this.end;
    }

    /**
     * Returns a copy of the range
     * @return {Range}
     */

  }, {
    key: "copy",
    value: function copy() {
      return new Range(this.start, this.end);
    }

    /**
     * Returns whether the given value is in the range
     * @param {number} index the index to check
     * @return {boolean}
     */

  }, {
    key: "contains",
    value: function contains(index) {
      return index >= this.start && index <= this.end;
    }

    /**
     * Extends the range to include the given index
     * @param {number} index the index to ad
     */

  }, {
    key: "extend",
    value: function extend(index) {
      this.start = Math.min(this.start, index);
      this.end = Math.max(this.end, index);
    }

    /**
     * Merge intersecting ranges
     * @param {number} ranges array of valid Range objects
     * @return {array}
     */

  }, {
    key: "length",
    get: function get() {
      return this.end - this.start + 1;
    }
  }], [{
    key: "merge",
    value: function merge(ranges) {
      ranges.sort(function (a, b) {
        return a.start - b.start;
      });

      var merged = [ranges[0]];

      for (var i = 1; i < ranges.length; i++) {
        var last = merged[merged.length - 1];
        var next = ranges[i];

        if (next.start <= last.end && next.end <= last.end) {
          // Ignore this range completely.
          // Next is contained inside last
          continue;
        } else if (next.start <= last.end) {
          last.end = next.end;
        } else {
          merged.push(next);
        }
      }

      return merged;
    }
  }]);

  return Range;
}();

exports.default = Range;