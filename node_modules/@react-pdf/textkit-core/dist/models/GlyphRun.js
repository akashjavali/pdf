'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Run2 = require('./Run');

var _Run3 = _interopRequireDefault(_Run2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GlyphRun = function (_Run) {
  _inherits(GlyphRun, _Run);

  function GlyphRun(start, end, attributes, glyphs, positions, stringIndices, glyphIndices, preScaled) {
    _classCallCheck(this, GlyphRun);

    var _this = _possibleConstructorReturn(this, (GlyphRun.__proto__ || Object.getPrototypeOf(GlyphRun)).call(this, start, end, attributes));

    _this.glyphs = glyphs || [];
    _this.positions = positions || [];
    _this.glyphIndices = glyphIndices || [];
    _this.stringIndices = stringIndices || [];
    _this.scale = attributes.fontSize / attributes.font.unitsPerEm;

    if (!preScaled) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _this.positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pos = _step.value;

          pos.xAdvance *= _this.scale;
          pos.yAdvance *= _this.scale;
          pos.xOffset *= _this.scale;
          pos.yOffset *= _this.scale;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    return _this;
  }

  _createClass(GlyphRun, [{
    key: 'slice',
    value: function slice(start, end) {
      var _this2 = this;

      var glyphs = this.glyphs.slice(start, end);
      var positions = this.positions.slice(start, end);
      var stringIndices = this.stringIndices.slice(start, end);
      var glyphIndices = this.glyphIndices.filter(function (i) {
        return i >= start && i < end;
      });

      glyphIndices = glyphIndices.map(function (index) {
        return index - start;
      });
      stringIndices = stringIndices.map(function (index) {
        return index - _this2.stringIndices[start];
      });

      start += this.start;
      end += this.start;
      end = Math.min(end, this.end);

      return new GlyphRun(start, end, this.attributes, glyphs, positions, stringIndices, glyphIndices, true);
    }
  }, {
    key: 'copy',
    value: function copy() {
      return new GlyphRun(this.start, this.end, this.attributes, this.glyphs, this.positions, this.stringIndices, this.glyphIndices, true);
    }
  }, {
    key: 'length',
    get: function get() {
      return this.end - this.start;
    }
  }, {
    key: 'stringStart',
    get: function get() {
      return 0;
    }
  }, {
    key: 'stringEnd',
    get: function get() {
      return this.glyphIndices.length - 1;
    }
  }, {
    key: 'advanceWidth',
    get: function get() {
      var width = 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.positions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var position = _step2.value;

          width += position.xAdvance;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return width;
    }
  }, {
    key: 'ascent',
    get: function get() {
      var ascent = this.attributes.font.ascent * this.scale;

      if (this.attributes.attachment) {
        return Math.max(ascent, this.attributes.attachment.height);
      }

      return ascent;
    }
  }, {
    key: 'descent',
    get: function get() {
      return this.attributes.font.descent * this.scale;
    }
  }, {
    key: 'lineGap',
    get: function get() {
      return this.attributes.font.lineGap * this.scale;
    }
  }, {
    key: 'height',
    get: function get() {
      return this.attributes.lineHeight || this.ascent - this.descent + this.lineGap;
    }
  }]);

  return GlyphRun;
}(_Run3.default);

exports.default = GlyphRun;