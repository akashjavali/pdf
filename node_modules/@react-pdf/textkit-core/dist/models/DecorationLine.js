'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Rect = require('../geom/Rect');

var _Rect2 = _interopRequireDefault(_Rect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DecorationLine = function () {
  function DecorationLine(rect, color, style) {
    _classCallCheck(this, DecorationLine);

    this.rect = rect;
    this.color = color || 'black';
    this.style = style || 'solid';
  }

  _createClass(DecorationLine, [{
    key: 'merge',
    value: function merge(line) {
      if (this.rect.maxX === line.rect.x && this.rect.y === line.rect.y) {
        this.rect.height = line.rect.height = Math.max(this.rect.height, line.rect.height);

        if (this.color === line.color) {
          this.rect.width += line.rect.width;
          return true;
        }
      }

      return false;
    }
  }, {
    key: 'slice',
    value: function slice(startX, endX) {
      var rect = new _Rect2.default(startX, this.rect.y, endX - startX, this.rect.height);
      return new DecorationLine(rect, this.color, this.style);
    }
  }]);

  return DecorationLine;
}();

exports.default = DecorationLine;