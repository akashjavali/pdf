'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _Run = require('../models/Run');

var _Run2 = _interopRequireDefault(_Run);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var flattenRuns = function flattenRuns() {
  var runs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var regularRuns = runs.filter(function (run) {
    return run.start !== run.end;
  });
  var emptyRuns = runs.filter(function (run) {
    return run.start === run.end;
  });

  var regularFlattenRuns = flattenRegularRuns(regularRuns);
  var emptyFlattenRuns = flattenEmptyRuns(emptyRuns);
  var sortRuns = function sortRuns(a, b) {
    return a.start - b.start || a.end - b.end;
  };

  return [].concat(_toConsumableArray(regularFlattenRuns), _toConsumableArray(emptyFlattenRuns)).sort(sortRuns);
};

var flattenEmptyRuns = function flattenEmptyRuns(runs) {
  var points = runs.reduce(function (acc, run) {
    if (!acc.includes(run.start)) {
      return [].concat(_toConsumableArray(acc), [run.start]);
    }

    return acc;
  }, []);

  return points.map(function (point) {
    var pointRuns = runs.filter(function (run) {
      return run.start === point;
    });
    var attrs = pointRuns.reduce(function (acc, run) {
      return Object.assign({}, acc, run.attributes);
    }, {});

    return new _Run2.default(point, point, attrs);
  });
};

var flattenRegularRuns = function flattenRegularRuns(runs) {
  var res = [];
  var points = [];

  for (var i = 0; i < runs.length; i++) {
    var run = runs[i];
    points.push(['start', run.start, run.attributes, i]);
    points.push(['end', run.end, run.attributes, i]);
  }

  points.sort(function (a, b) {
    return a[1] - b[1] || a[3] - b[3];
  });

  var start = -1;
  var attrs = {};
  var stack = [];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 3),
          type = _step$value[0],
          offset = _step$value[1],
          attributes = _step$value[2];

      if (start !== -1 && start < offset) {
        res.push(new _Run2.default(start, offset, attrs));
      }

      if (type === 'start') {
        stack.push(attributes);
        attrs = Object.assign({}, attrs, attributes);
      } else {
        attrs = {};

        for (var _i = 0; _i < stack.length; _i++) {
          if (stack[_i] === attributes) {
            stack.splice(_i--, 1);
          } else {
            Object.assign(attrs, stack[_i]);
          }
        }
      }

      start = offset;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return res;
};

exports.default = flattenRuns;