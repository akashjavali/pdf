'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cubic2quad = require('cubic2quad');

var _cubic2quad2 = _interopRequireDefault(_cubic2quad);

var _BBox = require('./BBox');

var _BBox2 = _interopRequireDefault(_BBox);

var _Polygon = require('./Polygon');

var _Polygon2 = _interopRequireDefault(_Polygon);

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SVG_COMMANDS = {
  moveTo: 'M',
  lineTo: 'L',
  quadraticCurveTo: 'Q',
  bezierCurveTo: 'C',
  closePath: 'Z'
};

// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.
var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);

/**
 * Path objects are returned by glyphs and represent the actual
 * vector outlines for each glyph in the font. Paths can be converted
 * to SVG path data strings, or to functions that can be applied to
 * render the path to a graphics context.
 */

var Path = function () {
  function Path() {
    _classCallCheck(this, Path);

    this.commands = [];
    this._bbox = null;
    this._cbox = null;
    this._bezier = false;
    this._quadratic = false;
  }

  _createClass(Path, [{
    key: 'rect',
    value: function rect(x, y, width, height) {
      this.moveTo(x, y);
      this.lineTo(x + width, y);
      this.lineTo(x + width, y + height);
      this.lineTo(x, y + height);
      this.closePath();
      return this;
    }
  }, {
    key: 'ellipse',
    value: function ellipse(x, y, r1) {
      var r2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : r1;

      // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084
      x -= r1;
      y -= r2;
      var ox = r1 * KAPPA;
      var oy = r2 * KAPPA;
      var xe = x + r1 * 2;
      var ye = y + r2 * 2;
      var xm = x + r1;
      var ym = y + r2;

      this.moveTo(x, ym);
      this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
      this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
      this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
      this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
      this.closePath();
      return this;
    }
  }, {
    key: 'circle',
    value: function circle(x, y, radius) {
      this.ellipse(x, y, radius);
    }
  }, {
    key: 'append',
    value: function append(path) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = path.commands[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref2 = _step.value;
          var command = _ref2.command,
              args = _ref2.args;

          this[command].apply(this, _toConsumableArray(args));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }

    /**
     * Compiles the path to a JavaScript function that can be applied with
     * a graphics context in order to render the path.
     * @return {string}
     */

  }, {
    key: 'toFunction',
    value: function toFunction() {
      var cmds = this.commands.map(function (c) {
        return '  ctx.' + c.command + '(' + c.args.join(', ') + ');';
      });
      return new Function('ctx', cmds.join('\n'));
    }

    /**
     * Converts the path to an SVG path data string
     * @return {string}
     */

  }, {
    key: 'toSVG',
    value: function toSVG() {
      var cmds = this.commands.map(function (c) {
        var args = c.args.map(function (arg) {
          return Math.round(arg * 100) / 100;
        });
        return '' + SVG_COMMANDS[c.command] + args.join(' ');
      });

      return cmds.join('');
    }

    /**
     * Gets the 'control box' of a path.
     * This is like the bounding box, but it includes all points including
     * control points of bezier segments and is much faster to compute than
     * the real bounding box.
     * @type {BBox}
     */

  }, {
    key: 'mapPoints',
    value: function mapPoints(fn) {
      var path = new Path();

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.commands[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var c = _step2.value;

          var args = [];
          for (var _i = 0; _i < c.args.length; _i += 2) {
            var _fn = fn(c.args[_i], c.args[_i + 1]),
                _fn2 = _slicedToArray(_fn, 2),
                x = _fn2[0],
                y = _fn2[1];

            args.push(x, y);
          }

          path[c.command].apply(path, args);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return path;
    }
  }, {
    key: 'transform',
    value: function transform(m0, m1, m2, m3, m4, m5) {
      return this.mapPoints(function (x, y) {
        x = m0 * x + m2 * y + m4;
        y = m1 * x + m3 * y + m5;
        return [x, y];
      });
    }
  }, {
    key: 'translate',
    value: function translate(x, y) {
      return this.transform(1, 0, 0, 1, x, y);
    }
  }, {
    key: 'rotate',
    value: function rotate(angle) {
      var cos = Math.cos(angle);
      var sin = Math.sin(angle);
      return this.transform(cos, sin, -sin, cos, 0, 0);
    }
  }, {
    key: 'scale',
    value: function scale(scaleX) {
      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;

      return this.transform(scaleX, 0, 0, scaleY, 0, 0);
    }
  }, {
    key: 'quadraticToBezier',
    value: function quadraticToBezier() {
      if (!this._quadratic) {
        return this;
      }

      var path = new Path();
      var x = 0;
      var y = 0;

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.commands[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var c = _step3.value;

          if (c.command === 'quadraticCurveTo') {
            var quads = _quadraticToBezier.apply(undefined, [x, y].concat(_toConsumableArray(c.args)));

            for (var _i2 = 2; _i2 < quads.length; _i2 += 6) {
              path.bezierCurveTo(quads[_i2], quads[_i2 + 1], quads[_i2 + 2], quads[_i2 + 3], quads[_i2 + 4], quads[_i2 + 5]);
            }
          } else {
            path[c.command].apply(path, _toConsumableArray(c.args));
            x = c.args[c.args.length - 2] || 0;
            y = c.args[c.args.length - 1] || 0;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return path;
    }
  }, {
    key: 'bezierToQuadratic',
    value: function bezierToQuadratic() {
      if (!this._bezier) {
        return this;
      }

      var path = new Path();
      var x = 0;
      var y = 0;

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = this.commands[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var c = _step4.value;

          if (c.command === 'bezierCurveTo') {
            var quads = _cubic2quad2.default.apply(undefined, [x, y].concat(_toConsumableArray(c.args), [0.1]));

            for (var _i3 = 2; _i3 < quads.length; _i3 += 4) {
              path.quadraticCurveTo(quads[_i3], quads[_i3 + 1], quads[_i3 + 2], quads[_i3 + 3]);
            }
          } else {
            path[c.command].apply(path, _toConsumableArray(c.args));
            x = c.args[c.args.length - 2] || 0;
            y = c.args[c.args.length - 1] || 0;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return path;
    }
  }, {
    key: 'flatten',
    value: function flatten() {
      if (this.isFlat) {
        return this;
      }

      var res = new Path();
      var cx = 0;
      var cy = 0;
      var sx = 0;
      var sy = 0;

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this.commands[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _ref4 = _step5.value;
          var command = _ref4.command,
              args = _ref4.args;

          switch (command) {
            case 'moveTo':
              res.moveTo.apply(res, _toConsumableArray(args));
              cx = sx = args[0];
              cy = sy = args[1];
              break;

            case 'lineTo':
              res.lineTo.apply(res, _toConsumableArray(args));
              cx = args[0];
              cy = args[1];
              break;

            case 'quadraticCurveTo':
              args = _quadraticToBezier.apply(undefined, [cx, cy].concat(_toConsumableArray(args)));
            // fall through!

            case 'bezierCurveTo':
              subdivideBezierWithFlatness.apply(undefined, [res, 0.6, cx, cy].concat(_toConsumableArray(args)));
              cx = args[4];
              cy = args[5];
              break;

            case 'closePath':
              cx = sx;
              cy = sy;
              res.closePath();
              break;

            default:
              throw new Error('Unknown path command: ' + command);
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return res;
    }
  }, {
    key: 'reverse',
    value: function reverse() {
      var res = new Path();
      var commands = this.commands;
      var start = commands[0];

      for (var _i4 = 1; _i4 < commands.length; _i4++) {
        var _commands$_i = commands[_i4],
            command = _commands$_i.command,
            args = _commands$_i.args;

        if (command !== 'moveTo' && _i4 + 1 < commands.length) {
          continue;
        }

        var closed = false;
        var j = _i4;

        if (command === 'moveTo') {
          j--;
        }

        var move = commands[j].command === 'closePath' ? start : commands[j];
        res.moveTo(move.args[0], move.args[1]);

        for (; commands[j].command !== 'moveTo'; j--) {
          var prev = commands[j - 1];
          var cur = commands[j];
          var px = prev.args[prev.args.length - 2];
          var py = prev.args[prev.args.length - 1];

          switch (cur.command) {
            case 'lineTo':
              if (closed && prev.command === 'moveTo') {
                res.closePath();
              } else {
                res.lineTo(px, py);
              }
              break;

            case 'bezierCurveTo':
              res.bezierCurveTo(cur.args[2], cur.args[3], cur.args[0], cur.args[1], px, py);
              if (closed && prev.command === 'moveTo') {
                prev.closePath();
              }
              break;

            case 'quadraticCurveTo':
              res.quadraticCurveTo(cur.args[0], cur.args[1], px, py);
              if (closed && prev.command === 'moveTo') {
                prev.closePath();
              }
              break;

            case 'closePath':
              closed = true;
              res.lineTo(px, py);
              break;

            default:
              throw new Error('Unknown path command: ' + command);
          }
        }

        start = commands[_i4];
      }

      return res;
    }
  }, {
    key: 'toPolygon',
    value: function toPolygon() {
      // Flatten and canonicalize the path.
      var path = this.flatten();
      if (!path.isClockwise) {
        path = path.reverse();
      }

      var contour = [];
      var polygon = new _Polygon2.default();

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = path.commands[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _ref6 = _step6.value;
          var command = _ref6.command,
              args = _ref6.args;

          switch (command) {
            case 'moveTo':
              if (contour.length) {
                polygon.addContour(contour);
                contour = [];
              }

              contour.push(new _Point2.default(args[0], args[1]));
              break;

            case 'lineTo':
              contour.push(new _Point2.default(args[0], args[1]));
              break;

            case 'closePath':
              if (contour.length) {
                polygon.addContour(contour);
                contour = [];
              }
              break;

            default:
              throw new Error('Unsupported path command: ' + command);
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return polygon;
    }
  }, {
    key: 'cbox',
    get: function get() {
      if (!this._cbox) {
        var cbox = new _BBox2.default();
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = this.commands[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var command = _step7.value;

            for (var _i5 = 0; _i5 < command.args.length; _i5 += 2) {
              cbox.addPoint(command.args[_i5], command.args[_i5 + 1]);
            }
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }

        this._cbox = Object.freeze(cbox);
      }

      return this._cbox;
    }

    /**
     * Gets the exact bounding box of the path by evaluating curve segments.
     * Slower to compute than the control box, but more accurate.
     * @type {BBox}
     */

  }, {
    key: 'bbox',
    get: function get() {
      if (this._bbox) {
        return this._bbox;
      }

      var bbox = new _BBox2.default();
      var cx = 0;
      var cy = 0;

      var f = function f(t) {
        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
      };

      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = this.commands[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var _ref8 = _step8.value;
          var command = _ref8.command,
              args = _ref8.args;

          switch (command) {
            case 'moveTo':
            case 'lineTo':
              var _args = args,
                  _args2 = _slicedToArray(_args, 2),
                  x = _args2[0],
                  y = _args2[1];

              bbox.addPoint(x, y);
              cx = x;
              cy = y;
              break;

            case 'quadraticCurveTo':
              args = _quadraticToBezier.apply(undefined, [cx, cy].concat(_toConsumableArray(args)));
            // fall through

            case 'bezierCurveTo':
              var _args3 = args,
                  _args4 = _slicedToArray(_args3, 6),
                  cp1x = _args4[0],
                  cp1y = _args4[1],
                  cp2x = _args4[2],
                  cp2y = _args4[3],
                  p3x = _args4[4],
                  p3y = _args4[5];

              // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html


              bbox.addPoint(p3x, p3y);

              var _p = [cx, cy];
              var _p2 = [cp1x, cp1y];
              var _p3 = [cp2x, cp2y];
              var _p4 = [p3x, p3y];

              for (var _i6 = 0; _i6 <= 1; _i6++) {
                var b = 6 * _p[_i6] - 12 * _p2[_i6] + 6 * _p3[_i6];
                var a = -3 * _p[_i6] + 9 * _p2[_i6] - 9 * _p3[_i6] + 3 * _p4[_i6];
                var c = 3 * _p2[_i6] - 3 * _p[_i6];

                if (a === 0) {
                  if (b === 0) {
                    continue;
                  }

                  var t = -c / b;
                  if (0 < t && t < 1) {
                    if (_i6 === 0) {
                      bbox.addPoint(f(t), bbox.maxY);
                    } else if (_i6 === 1) {
                      bbox.addPoint(bbox.maxX, f(t));
                    }
                  }

                  continue;
                }

                var b2ac = Math.pow(b, 2) - 4 * c * a;
                if (b2ac < 0) {
                  continue;
                }

                var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                if (0 < t1 && t1 < 1) {
                  if (_i6 === 0) {
                    bbox.addPoint(f(t1), bbox.maxY);
                  } else if (_i6 === 1) {
                    bbox.addPoint(bbox.maxX, f(t1));
                  }
                }

                var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                if (0 < t2 && t2 < 1) {
                  if (_i6 === 0) {
                    bbox.addPoint(f(t2), bbox.maxY);
                  } else if (_i6 === 1) {
                    bbox.addPoint(bbox.maxX, f(t2));
                  }
                }
              }

              cx = p3x;
              cy = p3y;
              break;
            default:
              break;
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return this._bbox = Object.freeze(bbox);
    }
  }, {
    key: 'isFlat',
    get: function get() {
      return !this._bezier && !this._quadratic;
    }
  }, {
    key: 'isClockwise',
    get: function get() {
      // Source: http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order
      // Original solution define that f the sum is positive, the points are in clockwise order.
      // We check for the opposite condition because we are in an inverted cartesian coordinate system
      var sx = 0;
      var sy = 0;
      var cx = 0;
      var cy = 0;
      var sum = 0;

      var path = this.flatten();

      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = path.commands[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var _ref10 = _step9.value;
          var command = _ref10.command,
              args = _ref10.args;

          var _args5 = _slicedToArray(args, 2),
              x = _args5[0],
              y = _args5[1];

          switch (command) {
            case 'moveTo':
              cx = x;
              cy = y;
              sx = x;
              sy = y;
              break;

            case 'lineTo':
              sum += (x - cx) * (cy + y);

              cx = x;
              cy = y;
              break;

            case 'closePath':
              sum += (sx - cx) * (sy + cy);
              break;

            default:
              throw new Error('Unknown path command: ' + command);
          }
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9.return) {
            _iterator9.return();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }

      return sum < 0;
    }
  }]);

  return Path;
}();

var _iteratorNormalCompletion10 = true;
var _didIteratorError10 = false;
var _iteratorError10 = undefined;

try {
  var _loop = function _loop() {
    var command = _step10.value;

    Path.prototype[command] = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._bbox = this._cbox = null;
      this.commands.push({
        command: command,
        args: args
      });

      if (command === 'bezierCurveTo') {
        this._bezier = true;
      } else if (command === 'quadraticCurveTo') {
        this._quadratic = true;
      }

      return this;
    };
  };

  for (var _iterator10 = Object.keys(SVG_COMMANDS)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
    _loop();
  }
} catch (err) {
  _didIteratorError10 = true;
  _iteratorError10 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion10 && _iterator10.return) {
      _iterator10.return();
    }
  } finally {
    if (_didIteratorError10) {
      throw _iteratorError10;
    }
  }
}

function _quadraticToBezier(cx, cy, qp1x, qp1y, x, y) {
  // http://fontforge.org/bezier.html
  var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)
  var cp1y = cy + 2 / 3 * (qp1y - cy);
  var cp2x = x + 2 / 3 * (qp1x - x); // CP2 = QP2 + 2/3 * (QP1-QP2)
  var cp2y = y + 2 / 3 * (qp1y - y);
  return [cp1x, cp1y, cp2x, cp2y, x, y];
}

function subdivideBezierWithFlatness(path, flatness, cx, cy, cp1x, cp1y, cp2x, cp2y, x, y) {
  var dx1 = cp1x - cx;
  var dx2 = cp2x - cp1x;
  var dx3 = x - cp2x;
  var dx4 = dx2 - dx1;
  var dx5 = dx3 - dx2;
  var dx6 = dx5 - dx4;

  var dy1 = cp1y - cy;
  var dy2 = cp2y - cp1y;
  var dy3 = y - cp2y;
  var dy4 = dy2 - dy1;
  var dy5 = dy3 - dy2;
  var dy6 = dy5 - dy4;

  var d1 = dx4 * dx4 + dy4 * dy4;
  var d2 = dx5 * dx5 + dy5 * dy5;
  var flatnessSqr = flatness * flatness;
  var wat = 9 * Math.max(d1, d2) / 16;

  var wat2 = 6 * dx6;
  var wat3 = 6 * (dx4 + dx6);
  var wat4 = 3 * (dx1 + dx4) + dx6;

  var wat5 = 6 * dy6;
  var wat6 = 6 * (dy4 + dy6);
  var wat7 = 3 * (dy1 + dy4) + dy6;

  var f = 1;

  while (wat > flatnessSqr && f <= 65535) {
    wat2 /= 8;
    wat3 = wat3 / 4 - wat2;
    wat4 = wat4 / 2 - wat3 / 2;

    wat5 /= 8;
    wat6 = wat6 / 4 - wat5;
    wat7 = wat7 / 2 - wat6 / 2;

    wat /= 16;
    f <<= 1;
  }

  while (--f > 0) {
    cx += wat4;
    wat4 += wat3;
    wat3 += wat2;

    cy += wat7;
    wat7 += wat6;
    wat6 += wat5;

    path.lineTo(cx, cy);
  }

  path.lineTo(x, y);
}

exports.default = Path;