"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a glyph bounding box
 */
var BBox = function () {
  function BBox() {
    var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
    var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;
    var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;

    _classCallCheck(this, BBox);

    /**
     * The minimum X position in the bounding box
     * @type {number}
     */
    this.minX = minX;

    /**
     * The minimum Y position in the bounding box
     * @type {number}
     */
    this.minY = minY;

    /**
     * The maxmimum X position in the bounding box
     * @type {number}
     */
    this.maxX = maxX;

    /**
     * The maxmimum Y position in the bounding box
     * @type {number}
     */
    this.maxY = maxY;
  }

  /**
   * The width of the bounding box
   * @type {number}
   */


  _createClass(BBox, [{
    key: "addPoint",
    value: function addPoint(x, y) {
      if (x < this.minX) {
        this.minX = x;
      }

      if (y < this.minY) {
        this.minY = y;
      }

      if (x > this.maxX) {
        this.maxX = x;
      }

      if (y > this.maxY) {
        this.maxY = y;
      }
    }
  }, {
    key: "addRect",
    value: function addRect(rect) {
      this.addPoint(rect.x, rect.y);
      this.addPoint(rect.maxX, rect.maxY);
    }
  }, {
    key: "copy",
    value: function copy() {
      return new BBox(this.minX, this.minY, this.maxX, this.maxY);
    }
  }, {
    key: "width",
    get: function get() {
      return this.maxX - this.minX;
    }

    /**
     * The height of the bounding box
     * @type {number}
     */

  }, {
    key: "height",
    get: function get() {
      return this.maxY - this.minY;
    }
  }]);

  return BBox;
}();

exports.default = BBox;