'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CORNERS = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight'];

/**
 * Represents a rectangle
 */

var Rect = function () {
  /** @public */
  function Rect() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, Rect);

    /**
     * The x-coordinate of the rectangle
     * @type {number}
     */
    this.x = x;

    /**
     * The y-coordinate of the rectangle
     * @type {number}
     */
    this.y = y;

    /**
     * The width of the rectangle
     * @type {number}
     */
    this.width = width;

    /**
     * The height of the rectangle
     * @type {number}
     */
    this.height = height;
  }

  /**
   * The maximum x-coordinate in the rectangle
   * @type {number}
   */


  _createClass(Rect, [{
    key: 'intersects',


    /**
     * Returns whether this rectangle intersects another rectangle
     * @param {Rect} rect - The rectangle to check
     * @return {boolean}
     */
    value: function intersects(rect) {
      return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;
    }

    /**
     * Returns whether this rectangle fully contains another rectangle
     * @param {Rect} rect - The rectangle to check
     * @return {boolean}
     */

  }, {
    key: 'containsRect',
    value: function containsRect(rect) {
      return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;
    }

    /**
     * Returns whether the rectangle contains the given point
     * @param {Point} point - The point to check
     * @return {boolean}
     */

  }, {
    key: 'containsPoint',
    value: function containsPoint(point) {
      return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;
    }

    /**
     * Returns the first corner of this rectangle (from top to bottom, left to right)
     * that is contained in the given rectangle, or null of the rectangles do not intersect.
     * @param {Rect} rect - The rectangle to check
     * @return {string}
     */

  }, {
    key: 'getCornerInRect',
    value: function getCornerInRect(rect) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = CORNERS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          if (rect.containsPoint(this[key])) {
            return key;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }, {
    key: 'equals',
    value: function equals(rect) {
      return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
    }
  }, {
    key: 'pointEquals',
    value: function pointEquals(point) {
      return this.x === point.x && this.y === point.y;
    }
  }, {
    key: 'sizeEquals',
    value: function sizeEquals(size) {
      return this.width === size.width && this.height === size.height;
    }

    /**
     * Returns a copy of this rectangle
     * @return {Rect}
     */

  }, {
    key: 'copy',
    value: function copy() {
      return new Rect(this.x, this.y, this.width, this.height);
    }
  }, {
    key: 'maxX',
    get: function get() {
      return this.x + this.width;
    }

    /**
     * The maximum y-coordinate in the rectangle
     * @type {number}
     */

  }, {
    key: 'maxY',
    get: function get() {
      return this.y + this.height;
    }

    /**
     * The area of the rectangle
     * @type {number}
     */

  }, {
    key: 'area',
    get: function get() {
      return this.width * this.height;
    }

    /**
     * The top left corner of the rectangle
     * @type {Point}
     */

  }, {
    key: 'topLeft',
    get: function get() {
      return new _Point2.default(this.x, this.y);
    }

    /**
     * The top right corner of the rectangle
     * @type {Point}
     */

  }, {
    key: 'topRight',
    get: function get() {
      return new _Point2.default(this.maxX, this.y);
    }

    /**
     * The bottom left corner of the rectangle
     * @type {Point}
     */

  }, {
    key: 'bottomLeft',
    get: function get() {
      return new _Point2.default(this.x, this.maxY);
    }

    /**
     * The bottom right corner of the rectangle
     * @type {Point}
     */

  }, {
    key: 'bottomRight',
    get: function get() {
      return new _Point2.default(this.maxX, this.maxY);
    }
  }]);

  return Rect;
}();

exports.default = Rect;